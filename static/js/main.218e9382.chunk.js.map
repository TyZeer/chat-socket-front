{"version":3,"sources":["assets/notification.mp3","util/ApiUtil.js","signin/Signin.js","signup/Signup.js","atom/globalState.js","profile/Profile.js","chat/components/ChatSidebar.js","chat/Image.js","chat/components/FileLink.js","chat/components/ChatMessages.js","chat/components/ChatInput.js","chat/Chat.js","App.js","serviceWorker.js","index.js","assets/user.png"],"names":["module","exports","ROOT_URL","request","async","headers","Headers","options","setContentType","append","localStorage","getItem","defaults","Object","assign","fetch","url","then","response","contentType","get","ok","includes","json","text","console","error","Promise","reject","catch","getFile","fileName","Signin","props","loading","setLoading","useState","useEffect","history","push","React","createElement","className","DingtalkOutlined","style","fontSize","Form","name","initialValues","remember","onFinish","values","loginRequest","method","body","JSON","stringify","setItem","token","status","notification","message","description","Item","rules","required","Input","size","prefix","UserOutlined","placeholder","LockOutlined","type","Button","shape","htmlType","Link","to","Signup","signupRequest","success","log","loggedInUser","atom","key","default","persistence_UNSTABLE","Meta","Card","Profile","currentUser","setLoggedInUser","useRecoilState","loadCurrentUser","width","border","actions","LogoutOutlined","onClick","logout","removeItem","avatar","Avatar","src","defaultImage","title","username","ChatSidebar","_ref","chats","setChats","activeChat","setActiveChat","onAddChatClick","useRecoilValue","id","defaultAvatar","alt","map","chat","hasNotification","prevChats","c","backgroundColor","handleProfileNavigation","aria-hidden","Image","file","fileUrl","setFileUrl","maxWidth","marginBottom","FileLink","href","download","target","rel","ChatMessages","_messages$content","messages","setMessages","isEditModalVisible","setIsEditModalVisible","editMessageContent","setEditMessageContent","editingMessageId","setEditingMessageId","activeMessageId","setActiveMessageId","handleDeleteMessage","messageId","chatMessageId","prevMessages","updatedMessages","content","filter","msg","Fragment","ScrollToBottom","_msg$sender","_msg$sender2","sender","onContextMenu","e","preventDefault","match","handleEditMessage","danger","Modal","visible","onOk","handleEditSubmit","newContent","updatedMessage","onCancel","TextArea","value","onChange","rows","ChatInput","setText","sendMessage","handleFileChange","event","onKeyPress","marginLeft","htmlFor","icon","stompClient","Chat","undefined","activeChatRef","useRef","currentChatSubscription","setCurrentChatSubscription","isConnected","setIsConnected","isModalVisible","setIsModalVisible","allUsers","setAllUsers","selectedUserIds","setSelectedUserIds","chatName","setChatName","setFile","connect","loadContacts","disconnect","unsubscribe","current","chatRoomId","_await$request","numberOfMessages","totalElements","findChatMessages","msgs","connected","chatSubscription","subscribe","onMessageReceived","Stomp","require","SockJS","over","Authorization","frame","onNotificationReceived","onerror","debug","str","onclose","parse","notificationChat","chatId","Audio","notificationSound","play","find","warn","newMessages","promises","all","length","users","trim","warning","formData","FormData","uploadFile","messageData","send","files","onCreateChat","chatNameToUse","selectedUser","user","chatInfo","user_id","createGroupChat","member_ids","err","okText","Checkbox","Group","checkedValues","u","display","margin","createContext","App","HashRouter","Switch","Route","exact","path","render","Boolean","window","location","hostname","RecoilPersist","updateState","recoilPersist","storage","sessionStorage","ReactDOM","RecoilRoot","initializeState","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.218e9382.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/notification.9c2591ac.mp3\";","const ROOT_URL = \"https://78.24.223.206:8085\";\r\n\r\nconst request = async (options) => {\r\n  const headers = new Headers();\r\n\r\n  if (options.setContentType !== false) {\r\n    headers.append(\"Content-Type\", \"application/json\");\r\n  }\r\n\r\n  if (localStorage.getItem(\"accessToken\")) {\r\n    headers.append(\r\n      \"Authorization\",\r\n      \"Bearer \" + localStorage.getItem(\"accessToken\")\r\n    );\r\n  }\r\n\r\n  const defaults = { headers: headers };\r\n  options = Object.assign({}, defaults, options);\r\n\r\n  return fetch(options.url, options)\r\n    .then((response) => {\r\n      const contentType = response.headers.get(\"content-type\");\r\n\r\n      if (!response.ok) {\r\n        return response.text().then((text) => {\r\n          console.error(\"Server error:\", text);\r\n          return Promise.reject(text);\r\n        });\r\n      }\r\n\r\n      if (contentType && contentType.includes(\"application/json\")) {\r\n        return response.json();\r\n      } else {\r\n        return response.text();\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Request failed:\", error);\r\n      return Promise.reject(error);\r\n    });\r\n};\r\n\r\nexport function login(loginRequest) {\r\n  return request({\r\n    url: ROOT_URL + \"/auth/sign-in\",\r\n    method: \"POST\",\r\n    body: JSON.stringify(loginRequest),\r\n  });\r\n}\r\n\r\nexport function signup(signupRequest) {\r\n  return request({\r\n    url: ROOT_URL + \"/auth/sign-up\",\r\n    method: \"POST\",\r\n    body: JSON.stringify(signupRequest),\r\n  });\r\n}\r\n\r\nexport function getCurrentUser() {\r\n  if (!localStorage.getItem(\"accessToken\")) {\r\n    return Promise.reject(\"No access token set.\");\r\n  }\r\n\r\n  return request({\r\n    url: ROOT_URL + \"/auth/who-am-i\",\r\n    method: \"POST\",\r\n  });\r\n}\r\n\r\nexport function createPrivateChat(chatInfo) {\r\n  if (!localStorage.getItem(\"accessToken\")) {\r\n    return Promise.reject(\"No access token set.\");\r\n  }\r\n\r\n  return request({\r\n    url: ROOT_URL + \"/api/chat-rooms/private\",\r\n    method: \"POST\",\r\n    body: JSON.stringify(chatInfo),\r\n  });\r\n}\r\n\r\nexport function createGroupChat(chatInfo) {\r\n  if (!localStorage.getItem(\"accessToken\")) {\r\n    return Promise.reject(\"No access token set.\");\r\n  }\r\n\r\n  return request({\r\n    url: ROOT_URL + \"/api/chat-rooms/group\",\r\n    method: \"POST\",\r\n    body: JSON.stringify(chatInfo),\r\n  });\r\n}\r\n\r\nexport function getUsers() {\r\n  if (!localStorage.getItem(\"accessToken\")) {\r\n    return Promise.reject(\"No access token set.\");\r\n  }\r\n\r\n  return request({\r\n    url: ROOT_URL + \"/api/users\",\r\n    method: \"GET\",\r\n  });\r\n}\r\n\r\nexport function getUserChats() {\r\n  if (!localStorage.getItem(\"accessToken\")) {\r\n    return Promise.reject(\"No access token set.\");\r\n  }\r\n\r\n  return request({\r\n    url: ROOT_URL + \"/api/chat-rooms/my\",\r\n    method: \"GET\",\r\n  });\r\n}\r\n\r\nexport async function findChatMessages(chatRoomId) {\r\n  if (!localStorage.getItem(\"accessToken\")) {\r\n    return Promise.reject(\"No access token set.\");\r\n  }\r\n  try {\r\n    const numberOfMessages = (\r\n      await request({\r\n        url: ROOT_URL + `/api/chat-messages/${chatRoomId}`,\r\n        method: \"GET\",\r\n      })\r\n    )?.totalElements;\r\n    if (numberOfMessages === 0) {\r\n      return { content: [] };\r\n    }\r\n    const response = await request({\r\n      url:\r\n        ROOT_URL +\r\n        `/api/chat-messages/${chatRoomId}?sort=timestamp,asc&size=${numberOfMessages}`,\r\n      method: \"GET\",\r\n    });\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Error fetching messages:\", error);\r\n    return { content: [] }; // Return an empty array in case of error\r\n  }\r\n}\r\n\r\nexport function findChatMessage(id) {\r\n  if (!localStorage.getItem(\"accessToken\")) {\r\n    return Promise.reject(\"No access token set.\");\r\n  }\r\n\r\n  return request({\r\n    url: ROOT_URL + \"/messages/\" + id,\r\n    method: \"GET\",\r\n  });\r\n}\r\n\r\nexport function getFile(fileName) {\r\n  return request({\r\n    url: ROOT_URL + \"/api/files/\" + fileName,\r\n  })\r\n    .then((response) => response)\r\n    .catch((error) => {\r\n      console.error(\"Error fetching file:\", error);\r\n      return {url: ''}; // Return null or handle the error as needed\r\n    });\r\n}\r\n\r\nexport function uploadFile(file) {\r\n  const formData = new FormData();\r\n  formData.append(\"file\", file);\r\n\r\n  return request({\r\n    method: \"POST\",\r\n    url: ROOT_URL + \"/api/files/upload\",\r\n    setContentType: false,\r\n    body: formData,\r\n  });\r\n}\r\nexport async function uploadFile2(file) {\r\n  const formData = new FormData();\r\n  formData.append(\"file\", file);\r\n\r\n  try {\r\n    const response = await fetch(\"https://78.24.223.206:8082/api/files/upload\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`, // Добавляем токен в заголовки\r\n      },\r\n      body: formData, // Передаем FormData в body\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Error uploading file: ${response.statusText}`);\r\n    }\r\n\r\n    const fileUrl = await response.text(); // Получаем URL загруженного файла\r\n    return fileUrl;\r\n  } catch (error) {\r\n    console.error(\"Ошибка загрузки файла:\", error.message);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function deleteChatMessage(chatMessageId) {\r\n  if (!localStorage.getItem(\"accessToken\")) {\r\n    return Promise.reject(\"No access token set.\");\r\n  }\r\n\r\n  return request({\r\n    url: `${ROOT_URL}/api/chat-messages/${chatMessageId}`,\r\n    method: \"DELETE\",\r\n  });\r\n}\r\n\r\nexport function editChatMessage(chatMessageId, newContent) {\r\n  if (!localStorage.getItem(\"accessToken\")) {\r\n    return Promise.reject(\"No access token set.\");\r\n  }\r\n\r\n  return request({\r\n    url: `${ROOT_URL}/api/chat-messages/${chatMessageId}`,\r\n    method: \"PUT\",\r\n    body: JSON.stringify({ content: newContent }),\r\n  });\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Form, Input, Button, Divider, notification } from \"antd\";\r\nimport {\r\n  UserOutlined,\r\n  LockOutlined,\r\n  DingtalkOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { login } from \"../util/ApiUtil\";\r\nimport \"./Signin.css\";\r\nimport { Link } from \"react-router-dom/cjs/react-router-dom\";\r\n\r\n/*global FB*/\r\n\r\nconst Signin = (props) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"accessToken\") !== null) {\r\n      props.history.push(\"/\");\r\n    }\r\n  }, []);\r\n\r\n\r\n\r\n  const onFinish = (values) => {\r\n    setLoading(true);\r\n    login(values)\r\n      .then((response) => {\r\n        localStorage.setItem(\"accessToken\", response.token);\r\n        props.history.push(\"/\");\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        if (error.status === 401) {\r\n          notification.error({\r\n            message: \"Error\",\r\n            description: \"Username or Password is incorrect. Please try again!\",\r\n          });\r\n        } else {\r\n          notification.error({\r\n            message: \"Error\",\r\n            description:\r\n              error.message || \"Sorry! Something went wrong. Please try again!\",\r\n          });\r\n        }\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <DingtalkOutlined style={{ fontSize: 50 }} />\r\n      <Form\r\n        name=\"normal_login\"\r\n        className=\"login-form\"\r\n        initialValues={{ remember: true }}\r\n        onFinish={onFinish}\r\n      >\r\n        <Form.Item\r\n          name=\"username\"\r\n          rules={[{ required: true, message: \"Please input your Username!\" }]}\r\n        >\r\n          <Input\r\n            size=\"large\"\r\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Username\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"password\"\r\n          rules={[{ required: true, message: \"Please input your Password!\" }]}\r\n        >\r\n          <Input\r\n            size=\"large\"\r\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Button\r\n            shape=\"round\"\r\n            size=\"large\"\r\n            htmlType=\"submit\"\r\n            className=\"login-form-button\"\r\n            loading={loading}\r\n          >\r\n            Log in\r\n          </Button>\r\n        </Form.Item>\r\n        Not a member yet? <Link to={'/signup'}>Sign up</Link>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Signin;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Form, Input, Button, notification } from \"antd\";\r\nimport { DingtalkOutlined } from \"@ant-design/icons\";\r\nimport { signup } from \"../util/ApiUtil\";\r\nimport \"./Signup.css\";\r\nimport { Link } from \"react-router-dom/cjs/react-router-dom\";\r\n\r\nconst Signup = (props) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"accessToken\") !== null) {\r\n      props.history.push(\"/\");\r\n    }\r\n  }, []);\r\n\r\n  const onFinish = (values) => {\r\n    setLoading(true);\r\n    signup(values)\r\n      .then((response) => {\r\n        notification.success({\r\n          message: \"Success\",\r\n          description:\r\n            \"Thank you! You're successfully registered. Please Login to continue!\",\r\n        });\r\n        console.log(response)\r\n        localStorage.setItem('accessToken', response?.token)\r\n        props.history.push(\"/login\");\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        notification.error({\r\n          message: \"Error\",\r\n          description:\r\n            error.message || \"Sorry! Something went wrong. Please try again!\",\r\n        });\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <DingtalkOutlined style={{ fontSize: 50 }} />\r\n      <Form\r\n        name=\"normal_login\"\r\n        className=\"login-form\"\r\n        initialValues={{ remember: true }}\r\n        onFinish={onFinish}\r\n      >\r\n        <Form.Item\r\n          name=\"username\"\r\n          rules={[{ required: true, message: \"Please input your Username!\" }]}\r\n        >\r\n          <Input size=\"large\" placeholder=\"Username\" />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"email\"\r\n          rules={[{ required: true, message: \"Please input your email!\" }]}\r\n        >\r\n          <Input size=\"large\" placeholder=\"Email\" />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"password\"\r\n          rules={[{ required: true, message: \"Please input your Password!\" }]}\r\n        >\r\n          <Input size=\"large\" type=\"password\" placeholder=\"Password\" />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Button\r\n            shape=\"round\"\r\n            size=\"large\"\r\n            htmlType=\"submit\"\r\n            className=\"login-form-button\"\r\n            loading={loading}\r\n          >\r\n            Signup\r\n          </Button>\r\n        </Form.Item>\r\n        Already a member? <Link to=\"/login\">Log in</Link>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import { atom } from \"recoil\";\r\n\r\nexport const loggedInUser = atom({\r\n  key: \"loggedInUser\",\r\n  default: {},\r\n  persistence_UNSTABLE: {\r\n    type: \"loggedInUser\",\r\n  },\r\n});\r\n\r\nexport const chatActiveContact = atom({\r\n  key: \"chatActiveContact\",\r\n  persistence_UNSTABLE: {\r\n    type: \"chatActiveContact\",\r\n  },\r\n});\r\n\r\nexport const chatMessages = atom({\r\n  key: \"chatMessages\",\r\n  default: [],\r\n  persistence_UNSTABLE: {\r\n    type: \"chatMessages\",\r\n  },\r\n});\r\n","import React, { useEffect } from \"react\";\r\nimport { Card, Avatar, Button } from \"antd\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loggedInUser } from \"../atom/globalState\";\r\nimport { LogoutOutlined } from \"@ant-design/icons\";\r\nimport { getCurrentUser } from \"../util/ApiUtil\";\r\nimport defaultImage from \"./../assets/user.png\";\r\nimport \"./Profile.css\";\r\nimport { Link } from \"react-router-dom/cjs/react-router-dom\";\r\n\r\nconst { Meta } = Card;\r\n\r\nconst Profile = (props) => {\r\n  const [currentUser, setLoggedInUser] = useRecoilState(loggedInUser);\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"accessToken\") === null) {\r\n      props.history.push(\"/login\");\r\n    }\r\n    loadCurrentUser();\r\n  }, []);\r\n\r\n  const loadCurrentUser = () => {\r\n    getCurrentUser()\r\n      .then((response) => {\r\n        setLoggedInUser(response);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem(\"accessToken\");\r\n    props.history.push(\"/login\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"profile-container\">\r\n      <Card\r\n        style={{ width: 420, border: \"1px solid #e1e0e0\" }}\r\n        actions={[<LogoutOutlined onClick={logout} />]}\r\n      >\r\n        <Meta\r\n          avatar={<Avatar src={defaultImage} className=\"user-avatar-circle\" />}\r\n          title={currentUser.username}\r\n          description={\"@\" + currentUser.username}\r\n        />\r\n        <Button>\r\n          <Link to={\"/chat\"}>Перейти в чаты</Link>\r\n        </Button>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport defaultAvatar from \"../../assets/user.png\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { loggedInUser } from \"../../atom/globalState\";\r\n\r\nconst ChatSidebar = ({\r\n  chats,\r\n  setChats,\r\n  activeChat,\r\n  setActiveChat,\r\n  onAddChatClick,\r\n  history,\r\n}) => {\r\n  const currentUser = useRecoilValue(loggedInUser);\r\n\r\n  const handleProfileNavigation = () => {\r\n    history.push(\"/\");\r\n  };\r\n  return (\r\n    <div id=\"sidepanel\">\r\n      <div id=\"profile\">\r\n        <div className=\"wrap\">\r\n          <img id=\"profile-img\" src={defaultAvatar} className=\"online\" alt=\"\" />\r\n          <p>{currentUser.username}</p>\r\n        </div>\r\n      </div>\r\n      <div id=\"contacts\">\r\n        <ul>\r\n          {chats.map((chat, key) => (\r\n            <li\r\n              onClick={() => {\r\n                setActiveChat(chat);\r\n                if(!chat.hasNotification) return;\r\n                chat.hasNotification = false;\r\n                setChats((prevChats) =>\r\n                  prevChats.map((c) => (c.id === chat.id ? chat : c))\r\n                );\r\n              }}\r\n              key={key}\r\n              className={\r\n                activeChat && chat.id === activeChat.id\r\n                  ? \"contact active\"\r\n                  : \"contact\"\r\n              }\r\n            >\r\n              <div className=\"wrap\">\r\n                <img id={chat.id} src={defaultAvatar} alt=\"\" />\r\n                <div className=\"meta\">\r\n                  <p className=\"name\">{chat.name}</p>\r\n                </div>\r\n                {chat.hasNotification && (\r\n                  <span style={{ backgroundColor: \"red\" }}></span>\r\n                )}\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div id=\"bottom-bar\">\r\n        <button onClick={handleProfileNavigation} id=\"addcontact\">\r\n          <i className=\"fa fa-user fa-fw\" aria-hidden=\"true\"></i>{\" \"}\r\n          <span>Profile</span>\r\n        </button>\r\n        <button onClick={onAddChatClick} id=\"settings\">\r\n          <i className=\"fa fa-cog fa-fw\" aria-hidden=\"true\"></i>{\" \"}\r\n          <span>Add chat</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatSidebar;\r\n","import React, { useEffect } from \"react\";\r\nimport { getFile } from \"../util/ApiUtil\";\r\nimport { use } from \"react\";\r\n\r\nexport const Image = ({file}) => {\r\n  const [fileUrl, setFileUrl] = React.useState(\"\");\r\n  useEffect(() => {\r\n    getFile(file).then((response) => {\r\n      setFileUrl(response.url);\r\n    });\r\n  }, []);\r\n  return (\r\n    <img\r\n      src={fileUrl ?? ''}\r\n      alt=\"Attached\"\r\n      style={{ maxWidth: \"200px\", width: \"100%\", marginBottom: \"10px\" }}\r\n    />\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { getFile } from \"../../util/ApiUtil\";\r\n\r\nconst FileLink = ({ file }) => {\r\n  const [fileUrl, setFileUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    getFile(file).then((response) => {\r\n      setFileUrl(response.url);\r\n    });\r\n  }, [file]);\r\n\r\n  return (\r\n    <a href={fileUrl} download target=\"_blank\" rel=\"noopener noreferrer\">\r\n      Download File\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default FileLink;","import React, { useState } from \"react\";\r\nimport ScrollToBottom from \"react-scroll-to-bottom\";\r\nimport { Image } from \"../Image\";\r\nimport { deleteChatMessage, editChatMessage } from \"../../util/ApiUtil\";\r\nimport { Button, Input, Modal } from \"antd\";\r\nimport FileLink from \"./FileLink\";\r\n\r\nconst isImage = (url) => {\r\n  return url.match(/\\.(jpeg|jpg|gif|png|webp|bmp|svg)$/i);\r\n};\r\n\r\nconst ChatMessages = ({ messages, currentUser, setMessages }) => {\r\n  const [isEditModalVisible, setIsEditModalVisible] = useState(false);\r\n  const [editMessageContent, setEditMessageContent] = useState(\"\");\r\n  const [editingMessageId, setEditingMessageId] = useState(null);\r\n  const [activeMessageId, setActiveMessageId] = useState(null); // Track the active message for showing actions\r\n\r\n  const handleDeleteMessage = (messageId) => {\r\n    deleteChatMessage(messageId)\r\n      .then(() => {\r\n        setMessages((prevMessages) => {\r\n          const updatedMessages = prevMessages.content.filter(\r\n            (msg) => msg.id !== messageId\r\n          );\r\n          return { ...prevMessages, content: updatedMessages };\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error deleting message:\", error);\r\n      });\r\n  };\r\n\r\n  const handleEditMessage = (messageId, content) => {\r\n    setEditingMessageId(messageId);\r\n    setEditMessageContent(content);\r\n    setIsEditModalVisible(true);\r\n  };\r\n\r\n  const handleEditSubmit = () => {\r\n    editChatMessage(editingMessageId, editMessageContent)\r\n      .then((updatedMessage) => {\r\n        setMessages((prevMessages) => {\r\n          const updatedMessages = prevMessages.content.map((msg) =>\r\n            msg.id === updatedMessage.id ? updatedMessage : msg\r\n          );\r\n          return { ...prevMessages, content: updatedMessages };\r\n        });\r\n        setIsEditModalVisible(false);\r\n        setEditingMessageId(null);\r\n        setEditMessageContent(\"\");\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error editing message:\", error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ScrollToBottom className=\"messages\">\r\n        <ul>\r\n          {messages.content?.map((msg, key) => (\r\n            <li\r\n              key={key}\r\n              className={\r\n                msg.sender?.id === currentUser.id ||\r\n                msg.sender === currentUser.username\r\n                  ? \"sent\"\r\n                  : \"replies\"\r\n              }\r\n              onContextMenu={(e) => {\r\n                e.preventDefault();\r\n                setActiveMessageId(\r\n                  activeMessageId === msg.id ? null : msg.id // Toggle visibility on right-click\r\n                );\r\n              }}\r\n            >\r\n              {msg.fileUrl && (\r\n                isImage(msg.fileUrl) ? (\r\n                  <Image file={msg.fileUrl} />\r\n                ) : (\r\n                  <FileLink file={msg.fileUrl} />\r\n                )\r\n              )}\r\n              <p>{msg.content}</p>\r\n              {msg.sender?.id === currentUser.id && activeMessageId === msg.id && (\r\n                <div className=\"message-actions\">\r\n                  <Button\r\n                    type=\"link\"\r\n                    onClick={() => handleEditMessage(msg.id, msg.content)}\r\n                  >\r\n                    Edit\r\n                  </Button>\r\n                  <Button\r\n                    type=\"link\"\r\n                    danger\r\n                    onClick={() => handleDeleteMessage(msg.id)}\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n                </div>\r\n              )}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </ScrollToBottom>\r\n\r\n      <Modal\r\n        title=\"Edit Message\"\r\n        visible={isEditModalVisible}\r\n        onOk={handleEditSubmit}\r\n        onCancel={() => setIsEditModalVisible(false)}\r\n      >\r\n        <Input.TextArea\r\n          value={editMessageContent}\r\n          onChange={(e) => setEditMessageContent(e.target.value)}\r\n          rows={4}\r\n        />\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatMessages;","import React from \"react\";\r\nimport { Button } from \"antd\";\r\n\r\nconst ChatInput = ({ text, setText, sendMessage, handleFileChange }) => {\r\n  return (\r\n    <div className=\"message-input\">\r\n      <div className=\"wrap\">\r\n        <input\r\n          name=\"user_input\"\r\n          size=\"large\"\r\n          placeholder=\"Write your message...\"\r\n          value={text}\r\n          onChange={(event) => setText(event.target.value)}\r\n          onKeyPress={(event) => {\r\n            if (event.key === \"Enter\") {\r\n              sendMessage(text);\r\n            }\r\n          }}\r\n        />\r\n        <input\r\n          type=\"file\"\r\n          onChange={handleFileChange}\r\n          style={{ marginLeft: \"10px\" }}\r\n          className=\"file-input\"\r\n          id=\"file-input\"\r\n        />\r\n        <label htmlFor=\"file-input\" className=\"file-label\">\r\n          <i className=\"fa fa-paperclip\" aria-hidden=\"true\"></i>\r\n        </label>\r\n        <Button\r\n          icon={<i className=\"fa fa-paper-plane\" aria-hidden=\"true\"></i>}\r\n          onClick={() => sendMessage(text)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInput;","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Button, Checkbox, Input, message, Modal } from \"antd\";\r\nimport {\r\n  getUsers,\r\n  findChatMessages,\r\n  getUserChats,\r\n  createPrivateChat,\r\n  createGroupChat,\r\n  uploadFile,\r\n} from \"../util/ApiUtil\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { loggedInUser } from \"../atom/globalState\";\r\nimport ScrollToBottom from \"react-scroll-to-bottom\";\r\nimport \"./Chat.css\";\r\nimport defaultAvatar from \"./../assets/user.png\";\r\nimport ChatSidebar from \"./components/ChatSidebar\";\r\nimport ChatMessages from \"./components/ChatMessages\";\r\nimport ChatInput from \"./components/ChatInput\";\r\nimport notificationSound from \"../assets/notification.mp3\"; // Import the sound file\r\n\r\nvar stompClient = null;\r\nconst Chat = (props) => {\r\n  const currentUser = useRecoilValue(loggedInUser);\r\n  const [text, setText] = useState(\"\");\r\n  const [chats, setChats] = useState([]);\r\n  const [activeChat, setActiveChat] = useState(undefined);\r\n  const activeChatRef = useRef(null);\r\n  const [currentChatSubscription, setCurrentChatSubscription] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [messages, setMessages] = useState({});\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [allUsers, setAllUsers] = useState([]);\r\n  const [selectedUserIds, setSelectedUserIds] = useState([]);\r\n  const [chatName, setChatName] = useState(\"\");\r\n  const [file, setFile] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"accessToken\") === null) {\r\n      props.history.push(\"/login\");\r\n    }\r\n    connect();\r\n    loadContacts();\r\n    return () => {\r\n      if (stompClient) {\r\n        stompClient.disconnect(() => {\r\n          console.log(\"Disconnected from WebSocket\");\r\n        });\r\n      }\r\n      if (currentChatSubscription) {\r\n        currentChatSubscription.unsubscribe();\r\n      }\r\n      setIsConnected(false);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    activeChatRef.current = activeChat;\r\n  }, [activeChat]);\r\n  useEffect(() => {\r\n    setMessages({});\r\n    if (activeChat === undefined) return;\r\n    findChatMessages(activeChat.id).then((msgs) => {\r\n      console.log(msgs);\r\n      return setMessages(msgs);\r\n    });\r\n    if (stompClient.connected) {\r\n      const chatSubscription = stompClient.subscribe(\r\n        `/topic/chat/${activeChat.id}`,\r\n        onMessageReceived\r\n      );\r\n      setCurrentChatSubscription(chatSubscription);\r\n    }\r\n    loadContacts();\r\n  }, [activeChat]);\r\n  useEffect(() => {\r\n    if (isConnected && activeChat) {\r\n      const chatSubscription = stompClient.subscribe(\r\n        `/topic/chat/${activeChat.id}`,\r\n        onMessageReceived\r\n      );\r\n      setCurrentChatSubscription(chatSubscription);\r\n    }\r\n  }, [isConnected]);\r\n  const onActiveChatChange = (chat) => {\r\n    if (chat.id === activeChat.id) return;\r\n    if (currentChatSubscription) {\r\n      currentChatSubscription.unsubscribe();\r\n    }\r\n    setActiveChat(chat);\r\n  };\r\n  const connect = () => {\r\n    const Stomp = require(\"stompjs\");\r\n    var SockJS = require(\"sockjs-client\");\r\n    SockJS = new SockJS(\"https://78.24.223.206:8082/ws\");\r\n    stompClient = Stomp.over(SockJS);\r\n    stompClient.connect(\r\n      { Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}` },\r\n      async function (frame) {\r\n        setIsConnected(true);\r\n        // Подписываемся на уведомления для текущего пользователя\r\n        stompClient.subscribe(\r\n          `/user/${currentUser.username}/queue/notifications`,\r\n          onNotificationReceived\r\n        );\r\n      }\r\n    );\r\n    stompClient.onerror = function (error) {\r\n      console.log(\"WebSocket Error:\", error);\r\n    };\r\n    stompClient.debug = function (str) {\r\n      console.log(str);\r\n    };\r\n    stompClient.onclose = function () {\r\n      console.log(\"Connection closed\");\r\n    };\r\n  };\r\n  const playNotificationSound = () => {\r\n    const audio = new Audio(notificationSound);\r\n    audio.play().catch((error) => console.error(\"Error playing notification sound:\", error));\r\n  };\r\n  const onNotificationReceived = (msg) => {\r\n    const message = JSON.parse(msg.body);\r\n    const notificationChat = message.chatId;\r\n    if (!notificationChat) {\r\n      console.warn(\"Received an empty or invalid notification:\", message);\r\n      return;\r\n    }\r\n    // Play notification sound when a new message is received\r\n    playNotificationSound();\r\n    setChats((prevChats) => {\r\n      console.log(\"Previous chats:\", prevChats); // Логируем предыдущее состояние\r\n      const chat = prevChats.find((chat) => chat.id == notificationChat);\r\n      if (chat) {\r\n        console.log(activeChatRef, chat);\r\n        if (activeChatRef.current && activeChatRef.current.id === chat.id) return prevChats;\r\n        chat.hasNotification = true;\r\n        return prevChats.map((c) => (c.id === chat.id ? chat : c));\r\n      } else {\r\n        console.warn(\"Chat not found for notification:\", notificationChat);\r\n        return prevChats;\r\n      }\r\n    });\r\n  };\r\n\r\n\r\n  const onMessageReceived = (msg) => {\r\n    const message = JSON.parse(msg.body);\r\n    if (!message || (!message.content && !message.fileUrl)) {\r\n      console.warn(\"Received an empty or invalid message:\", message);\r\n      return;\r\n    }\r\n\r\n    setMessages((prevMessages) => {\r\n      const newMessages = [...(prevMessages.content || [])];\r\n      newMessages.push({\r\n        sender: message.sender,\r\n        content: message.content,\r\n        fileUrl: message.fileUrl,\r\n      });\r\n      return { ...prevMessages, content: newMessages };\r\n    });\r\n\r\n  };\r\n\r\n  const sendMessage = async (msg) => {\r\n    if (msg.trim() === \"\" && !file) {\r\n      message.warning(\"Cannot send an empty message\");\r\n      return;\r\n    }\r\n\r\n    let fileUrl = null;\r\n\r\n    if (file) {\r\n      try {\r\n        const response = await uploadFile(file);\r\n        fileUrl = response;\r\n      } catch (error) {\r\n        console.error(\"Error uploading file:\", error);\r\n        message.error(\"Failed to upload file\");\r\n        setFile(null);\r\n        return;\r\n      }\r\n    }\r\n\r\n    const messageData = {\r\n      chatId: activeChat.id,\r\n      content: msg,\r\n      sender: currentUser.username,\r\n      ...(fileUrl && { fileUrl }),\r\n    };\r\n\r\n    stompClient.send(\"/app/chat.sendMessage\", {}, JSON.stringify(messageData));\r\n    setText(\"\");\r\n    setFile(null);\r\n  };\r\n\r\n  const loadContacts = () => {\r\n    const promise = getUserChats();\r\n\r\n    promise.then((promises) =>\r\n      Promise.all(promises).then((chats) => {\r\n        console.log(chats);\r\n        setChats(chats);\r\n        if (activeChat === undefined && chats.length > 0) {\r\n          setActiveChat(chats[0]);\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const onAddChatClick = () => {\r\n    getUsers().then((users) => {\r\n      setAllUsers(users);\r\n      setSelectedUserIds([]);\r\n      setChatName(\"\");\r\n      setIsModalVisible(true);\r\n    });\r\n  };\r\n\r\n  const onCreateChat = () => {\r\n    if (selectedUserIds.length === 0) {\r\n      message.warning(\"Select at least one user\");\r\n      return;\r\n    }\r\n\r\n    let chatNameToUse = chatName.trim();\r\n\r\n    if (selectedUserIds.length === 1) {\r\n      const selectedUser = allUsers.find(\r\n        (user) => user.id === selectedUserIds[0]\r\n      );\r\n      chatNameToUse = selectedUser ? selectedUser.username : chatNameToUse;\r\n    } else if (chatNameToUse === \"\") {\r\n      message.warning(\"Please enter a chat name\");\r\n      return;\r\n    }\r\n\r\n    const promise =\r\n      selectedUserIds.length === 1\r\n        ? createPrivateChat({\r\n            name: chatNameToUse,\r\n            user_id: selectedUserIds[0],\r\n          })\r\n        : createGroupChat({ name: chatNameToUse, member_ids: selectedUserIds });\r\n\r\n    promise\r\n      .then(() => {\r\n        message.success(\"Chat created\");\r\n        setIsModalVisible(false);\r\n        loadContacts();\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n        message.error(\"Could not create chat\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div id=\"frame\">\r\n      <ChatSidebar\r\n        chats={chats}\r\n        activeChat={activeChat}\r\n        setActiveChat={onActiveChatChange}\r\n        onAddChatClick={onAddChatClick}\r\n        history={props.history}\r\n        setChats={setChats}\r\n      />\r\n      <div className=\"content\">\r\n        <div className=\"contact-profile\">\r\n          <img src={activeChat && defaultAvatar} alt=\"\" />\r\n          <p>{activeChat && activeChat.name}</p>\r\n        </div>\r\n        <ChatMessages\r\n          messages={messages}\r\n          currentUser={currentUser}\r\n          setMessages={setMessages} // Pass setMessages to allow updates from ChatMessages\r\n        />\r\n        <ChatInput\r\n          text={text}\r\n          setText={setText}\r\n          sendMessage={sendMessage}\r\n          handleFileChange={(event) => {\r\n            if (event.target.files.length > 0) {\r\n              setFile(event.target.files[0]);\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n      <Modal\r\n        title=\"Select users to chat with\"\r\n        visible={isModalVisible}\r\n        onCancel={() => setIsModalVisible(false)}\r\n        onOk={onCreateChat}\r\n        okText=\"Create chat\"\r\n      >\r\n        <Input\r\n          placeholder=\"Enter chat name\"\r\n          value={chatName}\r\n          onChange={(e) => setChatName(e.target.value)}\r\n          style={{ marginBottom: 16 }}\r\n        />\r\n        <Checkbox.Group\r\n          style={{ width: \"100%\" }}\r\n          value={selectedUserIds}\r\n          onChange={(checkedValues) => setSelectedUserIds(checkedValues)}\r\n        >\r\n          {allUsers.map((u) => (\r\n            <Checkbox\r\n              key={u.id}\r\n              value={u.id}\r\n              style={{ display: \"block\", margin: \"8px 0\" }}\r\n            >\r\n              {u.username}\r\n            </Checkbox>\r\n          ))}\r\n        </Checkbox.Group>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","import React from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport Signin from \"./signin/Signin\";\r\nimport Signup from \"./signup/Signup\";\r\nimport Profile from \"./profile/Profile\";\r\nimport Chat from \"./chat/Chat\";\r\nimport \"./App.css\";\r\nimport { HashRouter } from \"react-router-dom/cjs/react-router-dom\";\r\n\r\nexport const AppContext = React.createContext();\r\nconst App = (props) => {\r\n  return (\r\n    <div className=\"App\">\r\n      <HashRouter>\r\n        <Switch>\r\n          <Route exact path=\"/\" render={(props) => <Profile {...props} />} />\r\n          <Route\r\n            exact\r\n            path=\"/login\"\r\n            render={(props) => <Signin {...props} />}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/signup\"\r\n            render={(props) => <Signup {...props} />}\r\n          />\r\n          <Route exact path=\"/chat\" render={(props) => <Chat {...props} />} />\r\n        </Switch>\r\n      </HashRouter>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { RecoilRoot } from \"recoil\";\r\nimport recoilPersist from \"recoil-persist\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nconst { RecoilPersist, updateState } = recoilPersist([], {\r\n  key: \"recoil-persist\",\r\n  storage: sessionStorage,\r\n});\r\n\r\nReactDOM.render(\r\n  <RecoilRoot initializeState={updateState}>\r\n    <RecoilPersist />\r\n    <App />\r\n  </RecoilRoot>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/user.1f0a44cd.png\";"],"sourceRoot":""}